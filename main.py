import os
import asyncio
import uuid
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import StreamingResponse, JSONResponse
from pydantic import BaseModel
from github import Github
import json
from crewai import Agent, Task, Crew
from langchain_openai import ChatOpenAI
from crewai_tools import BaseTool

# ---------------- Environment ----------------
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")

if not OPENROUTER_API_KEY or not GITHUB_TOKEN:
    raise ValueError("OPENROUTER_API_KEY and GITHUB_TOKEN are required")

# ---------------- FastAPI ----------------
app = FastAPI(title="MACC API")
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ---------------- Session queues ----------------
session_queues = {}
project_context = {}

def enqueue(session_id, msg, type="status"):
    if session_id not in session_queues:
        session_queues[session_id] = asyncio.Queue()
    session_queues[session_id].put_nowait({"type": type, "message": msg})

async def stream_queue(session_id: str):
    q = session_queues.get(session_id)
    if not q:
        yield json.dumps({"type":"status","message":"No updates for this session"}) + "\n"
        return
    while True:
        msg = await q.get()
        yield json.dumps(msg) + "\n"
        await asyncio.sleep(0.05)

# ---------------- Models ----------------
class ProjectRequest(BaseModel):
    spec: str
    github_repo: str = ""

class SuggestionRequest(BaseModel):
    session_id: str
    suggestion: str

# ---------------- Tools ----------------
class GitHubTool(BaseTool):
    name: str = "GitHubTool"
    description: str = "Push code to GitHub"

    def push(self, repo_name: str, code: str, filename: str, readme: str = None):
        g = Github(GITHUB_TOKEN)
        user = g.get_user()
        repo_short_name = repo_name.split("/")[-1]
        try:
            repo = user.get_repo(repo_short_name)
        except:
            repo = user.create_repo(repo_short_name, auto_init=True)
        repo.create_file(filename, "Add main code", code)
        if readme:
            try:
                repo.create_file("README.md", "Add README", readme)
            except:
                pass
        return f"https://github.com/{repo_name}/blob/main/{filename}"

github_tool = GitHubTool()

# ---------------- LLM & Agents ----------------
llm = ChatOpenAI(
    model="openrouter/x-ai/grok-4-fast:free",
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
)

planner = Agent(role="Planner", goal="Break down project spec into tasks", backstory="Expert project planner", llm=llm)
coder = Agent(role="Coder", goal="Generate code", backstory="Expert Python programmer", llm=llm)
reviewer = Agent(role="Reviewer", goal="Refine code and ensure quality", backstory="Code reviewer", llm=llm)

# ---------------- Project generation ----------------
async def generate_project(session_id: str, spec: str, github_repo: str):
    enqueue(session_id, "Starting project generation...")
    if not spec.strip():
        enqueue(session_id, "Error: Empty project spec")
        return

    # Auto-create GitHub repo name
    import uuid
    from github import Github
    g = Github(GITHUB_TOKEN)
    user = g.get_user()
    if not github_repo.strip():
        github_repo = f"{user.login}/{uuid.uuid4().hex[:8]}-macc-project"
        enqueue(session_id, f"Auto-created GitHub repo: {github_repo}")

    # Planner
    enqueue(session_id, "Planner agent: breaking down tasks...")
    plan_task = Task(description=f"Break down: {spec}", agent=planner, expected_output="List of tasks in JSON")
    crew = Crew(agents=[planner], tasks=[plan_task])
    result = crew.kickoff()
    tasks = [t.dict() for t in result.tasks_output] if result.tasks_output else []
    enqueue(session_id, "Planner agent completed tasks!")

    # Coder
    enqueue(session_id, "Coder agent: generating code...")
    code_task = Task(description=f"Generate code for spec: {spec}", agent=coder, expected_output="Python code")
    crew = Crew(agents=[coder], tasks=[code_task])
    result = crew.kickoff()
    code = result.raw if hasattr(result, "raw") else ""
    for line in code.split("\n"):
        enqueue(session_id, line, type="code")
        await asyncio.sleep(0.02)
    enqueue(session_id, "Coder agent completed code!")

    # Reviewer
    enqueue(session_id, "Reviewer agent: refining code...")
    review_task = Task(description=f"Refine code:\n{code}", agent=reviewer, expected_output="Refined code")
    crew = Crew(agents=[reviewer], tasks=[review_task])
    result = crew.kickoff()
    refined_code = result.raw if hasattr(result, "raw") else ""
    enqueue(session_id, "Reviewer agent completed review!")

    # README / description
    readme_text = f"# Project Description\n\n{spec}\n\nGenerated by MACC AI."

    project_context[session_id] = {
        "spec": spec,
        "github_repo": github_repo,
        "tasks": tasks,
        "code": refined_code,
        "readme": readme_text,
        "repo_url": None
    }

    enqueue(session_id, "Project generation completed! Ready to commit when confirmed.")

async def refine_project(session_id: str, suggestion: str):
    if session_id not in project_context:
        enqueue(session_id, "Error: Session not found")
        return
    context = project_context[session_id]
    code = context["code"]
    enqueue(session_id, f"Applying suggestion: {suggestion}")
    refine_task = Task(description=f"Refine code:\n{code}\nBased on suggestion: {suggestion}", agent=reviewer, expected_output="Refined code")
    crew = Crew(agents=[reviewer], tasks=[refine_task])
    result = crew.kickoff()
    refined_code = result.raw if hasattr(result, "raw") else ""
    context["code"] = refined_code
    enqueue(session_id, "Refinement complete!")

# ---------------- Endpoints ----------------
@app.post("/generate-project-stream")
async def generate_project_endpoint(request: ProjectRequest):
    session_id = str(uuid.uuid4())
    asyncio.create_task(generate_project(session_id, request.spec, request.github_repo))
    return StreamingResponse(stream_queue(session_id), media_type="text/event-stream")

@app.post("/suggest-changes-stream")
async def suggest_changes_endpoint(request: SuggestionRequest):
    asyncio.create_task(refine_project(request.session_id, request.suggestion))
    return StreamingResponse(stream_queue(request.session_id), media_type="text/event-stream")

@app.post("/commit")
async def commit_code(session_id: str):
    if session_id not in project_context:
        return JSONResponse({"error": "Session not found"}, status_code=404)
    ctx = project_context[session_id]
    url = github_tool.push(ctx["github_repo"], ctx["code"], "main.py", ctx["readme"])
    ctx["repo_url"] = url
    return {"message": "Code committed!", "repo_url": url}

@app.get("/")
async def root():
    return {"message": "MACC API running"}
